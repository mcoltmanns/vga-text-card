operate in 640x480, pixel clock at 25.175MHz

see main branch for detailed explanation
effective resolution is 160x120

but - we are still counting lines at full speed. what about an 8x8 font? (divide res by 8)
	good font is ibm cga oem charset
	at full resolution, this gives 80x60 characters. that's not bad!
	text mode will be monochrome

take counter lines
	drop bottom 3 - gives character index - goes to screenBufROM - where the addresses to the charGenRom are written

	then the bottom 3 would give the position within the character

how to lay out chargen rom?
	with the full tileset we have 256 characters - that means 8 lines to specify character
	then 3+3 lines for pixel coordinate - works out to 14 lines. works fine.
	let pixel coordinates start at top left
	let bottom 3 pxCoord lines be x
	let top 3 be y

cPixH/V - tells us where we are in the current character

cH/V - tells us which character we're on

bottom byte of charBuf is horizontal character coord (0x**00-0x**4F)
top byte of charBuf is vertical character coord (0x00**-0x3B**)

top byte of charGen is character code (0x00-0xFF)
bottom nibble of charGen is character pixel horizontal (0x*0-0x*7)
second nibble of charGen is character pixel vertical (0x0*-0x7*)

ascii codes do work!

improvements?
	use 74HC4060 counters - these are 12-bit and would mean much simpler counting hardware
	generate timing pulses with latch logic (CD4043B works nicely for this - 4 SR latches in one package) instead of sequential - also big hardware simplification
	the less hardware the better! less hardware means less jangly frequencies!

	again, hCount would reset on 799 (11 0001 1111), vCount reset on 524 (10 0000 1100)

	we don't care about hVis because editing the vRAM can only happen during vBlank anyways

	if these values don't work, try moving them forward or back by 1.

	hSync:
		reset on 655? (10 1000 1111)
		set on 752? (10 1111 0000)

	vSync:
		reset on 449? (01 1100 0001)
		set 452? (01 1100 0100)

	vVis:
		set on vCount reset
		reset on 480 (01 1110 0000)